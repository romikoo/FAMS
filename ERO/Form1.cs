using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DataBase;
using DevExpress.XtraGrid.Views.Grid;
using Helpers;

namespace ERO
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            ero_FR_BandTableAdapter.Fill(officeDataSet.ero_FR_Band);
            ero_ImplementationsTableAdapter.Fill(officeDataSet.ero_Implementations);
            ero_AllocationsTableAdapter.Fill(officeDataSet.ero_Allocations);
            ero_AllocationPlanTableAdapter.Fill(officeDataSet.ero_AllocationPlan);
            ero_LicencesTableAdapter.Fill(officeDataSet.ero_Licences);

            colFFrom.DisplayFormat.Format = new FreqCustomFormatter();
            colFFrom.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;
            colFFrom1.DisplayFormat.Format = new FreqCustomFormatter();
            colFFrom1.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;
            colFTo.DisplayFormat.Format = new FreqCustomFormatter();
            colFTo.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;
            colFTo1.DisplayFormat.Format = new FreqCustomFormatter();
            colFTo1.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;
        }

        private void ero_ImplementationsBindingSource_ListChanged(object sender, ListChangedEventArgs e)
        {
            repositoryItemComboBox1.Items.Clear();
            for (int i = 0; i < ero_ImplementationsBindingSource.Count; i++)
            {
                ero_ImplementationsBindingSource.Position = i;
                string text = ((OfficeDataSet.ero_ImplementationsRow)((DataRowView)ero_ImplementationsBindingSource.Current).Row).Name;
                
                bool exists = false;
                foreach (string s in repositoryItemComboBox1.Items)
                {
                    if (s.Equals(text))
                    {
                        exists = true; break;
                    }
                }
                if (!exists && !text.Equals("")) repositoryItemComboBox1.Items.Add(text);
            }
            //System.Diagnostics.Debug.WriteLine("list changed");
        }

        private void implementationView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            ero_ImplementationsBindingSource.EndEdit();
            ero_ImplementationsTableAdapter.Update(officeDataSet.ero_Implementations);
            //System.Diagnostics.Debug.WriteLine("Updated");
             
        }

        private void implementationView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (MessageBox.Show("გსურთ წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                  DialogResult.Yes)
                    return;
                GridView view = sender as GridView;
                view.DeleteRow(view.FocusedRowHandle);
                this.ero_ImplementationsTableAdapter.Update(this.officeDataSet.ero_Implementations);
            }

        }

        private void mainView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            ero_FR_BandBindingSource.EndEdit();
            ero_FR_BandTableAdapter.Update(officeDataSet.ero_FR_Band);
        }

        private void mainView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (MessageBox.Show("გსურთ წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                  DialogResult.Yes)
                    return;
                GridView view = sender as GridView;
                view.DeleteRow(view.FocusedRowHandle);
                this.ero_FR_BandTableAdapter.Update(this.officeDataSet.ero_FR_Band);
            }
        }

        private void allocationGridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            ero_AllocationPlanBindingSource.EndEdit();
            ero_AllocationPlanTableAdapter.Update(officeDataSet.ero_AllocationPlan);
        }

        private void allocationGridView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (MessageBox.Show("გსურთ წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                  DialogResult.Yes)
                    return;
                GridView view = sender as GridView;
                view.DeleteRow(view.FocusedRowHandle);
                this.ero_AllocationPlanTableAdapter.Update(this.officeDataSet.ero_AllocationPlan);
            }
        }

        private void LicGridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            ero_LicencesBindingSource.EndEdit();
            ero_LicencesTableAdapter.Update(officeDataSet.ero_Licences);
        }

        private void LicGridView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (MessageBox.Show("გსურთ წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                  DialogResult.Yes)
                    return;
                GridView view = sender as GridView;
                view.DeleteRow(view.FocusedRowHandle);
                this.ero_LicencesTableAdapter.Update(this.officeDataSet.ero_Licences);
            }
        }

       

        

       
    }
}
