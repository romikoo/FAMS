using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using Helpers;
using DevExpress.XtraGrid.Views.Grid;
using System.Diagnostics;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraGrid.Scrolling;
using DevExpress.XtraGrid.Views.Base;
using System.Reflection;
using DataBase;
using System.IO;
using Spire.Pdf;
using System.Data.SqlClient;
using Fams.Reports;
using System.Xml;
using System.Threading;
using DevExpress.XtraMap;
using DevExpress.XtraEditors;
using Earth;

namespace Fams
{
    public partial class frmOrgs : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        User _user;
        private int? lic;
        private int[] freq;
        private bool _NeedShowEditor = true;
        System.Drawing.Image gsm, radiocom, portable, rel_fixed, rel_mobile, rel_passive;
        Thread workerThread;
        zone_cities zCities;
        private commShare common;

        EarthHelpers earth;

        public frmOrgs(User user, ref commShare comm)
        {
            System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("ka-GE");
            System.Threading.Thread.CurrentThread.CurrentCulture = ci;
            System.Threading.Thread.CurrentThread.CurrentUICulture = ci;

            zCities = new zone_cities(user);
            this.common = comm;

            InitializeComponent();

            common.goToCompFreqChange += new commShare.GoToCompFreqDelegate(gotofreq);

            gsm = HelperFunctions.getImage(@"\\mcc-fls\Images\Tx\gsm.png");//"http://geo.gncc.ge/fr/Images/Tx/gsm.png");
            radiocom = HelperFunctions.getImage(@"\\mcc-fls\Images\Tx\repeater.png");//"http://geo.gncc.ge/fr/Images/Tx/repeater.png");
            portable = HelperFunctions.getImage(@"\\mcc-fls\Images\Tx\portable.png");//"http://geo.gncc.ge/fr/Images/Tx/portable.png");
            rel_fixed = HelperFunctions.getImage(@"\\mcc-fls\Images\Tx\relfixed.png");//"http://geo.gncc.ge/fr/Images/Tx/relfixed.png");
            rel_mobile = HelperFunctions.getImage(@"\\mcc-fls\Images\Tx\relmobile.png");//"http://geo.gncc.ge/fr/Images/Tx/relmobile.png");
            rel_passive = HelperFunctions.getImage(@"\\mcc-fls\Images\Tx\relpassive.png");//"http://geo.gncc.ge/fr/Images/Tx/relpassive.png");


            _user = user;
            gridControl.Font = new Font("Sylfaen", 10f);
            xtraTabControl.SelectedTabPageIndex = 0;


            // This line of code is generated by Data Source Configuration Wizard
            zone_CityTableAdapter.Fill(officeDataSet.Zone_City);
            fls_COMPANY_INFOTableAdapter.Fill(officeDataSet.fls_COMPANY_INFO);
            fls_LICENCE_INFOTableAdapter.Fill(officeDataSet.fls_LICENCE_INFO);
            fls_LICENCE_FREQTableAdapter.Fill(officeDataSet.fls_LICENCE_FREQ);
            acc_LettersTableAdapter.FillSmallBy(officeDataSet.acc_Letters);
            arc_fls_LICENCE_INFOTableAdapter.Fill(officeDataSet.arc_fls_LICENCE_INFO);
            arc_fls_LICENCE_FREQTableAdapter.Fill(officeDataSet.arc_fls_LICENCE_FREQ);
            fls_verificationActTableAdapter.FillByInfo(officeDataSet.fls_verificationAct);

            colFREQ.DisplayFormat.Format = new FreqCustomFormatter();
            colFREQ.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;
            colBandWidth.DisplayFormat.Format = new FreqCustomFormatter();
            colBandWidth.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;

            colFREQ1.DisplayFormat.Format = new FreqCustomFormatter();
            colFREQ1.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;
            colBandWidth1.DisplayFormat.Format = new FreqCustomFormatter();
            colBandWidth1.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Custom;
        }

        #region GridEvents

        private void gridControl_FocusedViewChanged(object sender, DevExpress.XtraGrid.ViewFocusEventArgs e)
        {
            try
            {
                DisableEnableCommandsDependingOnCurrentViewAndSelectedRows(sender, "FocusedViewChanged");
            }
            catch { }
        }

        private void mainView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            DisableEnableCommandsDependingOnCurrentViewAndSelectedRows(sender, "FocusedRowChanged");
        }

        private void licenceView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            DisableEnableCommandsDependingOnCurrentViewAndSelectedRows(sender, "FocusedRowChanged");
        }

        private void verificationView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            pdfViewer.ClearSelection();
            if (!this.pdfButton.Down) return;

            GridView gridView = sender as GridView;
            this.fls_verificationActBindingSource.Position = this.fls_verificationActBindingSource.Find("id", (object)Convert.ToInt32(gridView.GetDataRow(gridView.FocusedRowHandle)["id"]));
            try
            {
                this.pdfViewer.LoadDocument((Stream)new MemoryStream(HelperFunctions.fill("select top 1 pdf from fls_verificationAct WHERE id = " + (Int32)Convert.ToInt32(gridView.GetDataRow(gridView.FocusedRowHandle)["id"]), DataBase.Properties.Settings.Default.OfficeConnectionString).Tables[0].Rows[0]["pdf"] as byte[]));
            }
            catch (Exception ex)
            {
                this.pdfButton.Down = false;
            }
        }

        private void mainView_RowCountChanged(object sender, EventArgs e)
        {
            DisableEnableCommandsDependingOnCurrentViewAndSelectedRows(sender, "RowCountChanged");
        }

        private void verificationView_DoubleClick(object sender, EventArgs e)
        {
            /*
            DevExpress.XtraGrid.Views.Base.ColumnView detailView = mainView.GetDetailView(mainView.FocusedRowHandle, mainView.GetRelationIndex(verificationView.FocusedRowHandle,verificationView.LevelName)) as DevExpress.XtraGrid.Views.Base.ColumnView;
            int id = Convert.ToInt32(detailView.GetDataRow(detailView.FocusedRowHandle)["id"]);
            fls_verificationActBindingSource.Position = this.fls_verificationActBindingSource.Find("id", id);
             */
            GridView view = sender as GridView;
            int id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
            fls_verificationActBindingSource.Position = this.fls_verificationActBindingSource.Find("id", id);


            frmAct f = new frmAct(ref fls_verificationActBindingSource);
            if (f.ShowDialog() == DialogResult.OK) this.fls_verificationActTableAdapter.Update(this.officeDataSet.fls_verificationAct);
        }

        private void verificationView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (MessageBox.Show("გსურთ წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                  DialogResult.Yes)
                    return;
                GridView view = sender as GridView;
                ExpandCollapseAllRows(view, false);
                view.DeleteRow(view.FocusedRowHandle);
                this.fls_verificationActTableAdapter.Update(this.officeDataSet.fls_verificationAct);
            }

        }

        private void licenceView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (_user.DeleteLicence)
                {
                    GridView view = sender as GridView;
                    int lic = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
                    DataSet ds = HelperFunctions.fill("SELECT * FROM fls_LICENCE_FREQ WHERE licence_id=" + lic, DataBase.Properties.Settings.Default.OfficeConnectionString);
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        DataSet ds2 = Helpers.Functions.fill(string.Format("select dbo.getFreqUsageStats({0})", ds.Tables[0].Rows[i]["id"].ToString()), DataBase.Properties.Settings.Default.OfficeConnectionString.ToString());
                        if (Convert.ToInt32(ds2.Tables[0].Rows[0][0].ToString()) > 0)
                        {
                            MessageBox.Show("სიხშირე არის გამოყენებაში, ჯერ უნდა წაშალოთ სადგური რათა წაიშალოს სიხშირე.", "შეცდომა");
                            return;
                        }
                        ds2.Dispose();
                    }
                    ds.Dispose();



                    if (MessageBox.Show("გსურთ ამ ლიცენზიის წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                      DialogResult.Yes)
                        return;
                    arcButtonItem_ItemClick(sender, null);
                    ExpandCollapseAllRows(view, false);
                    view.DeleteRow(view.FocusedRowHandle);
                    this.fls_LICENCE_INFOTableAdapter.Update(this.officeDataSet.fls_LICENCE_INFO);
                }
                else MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void freqsView_KeyDown(object sender, KeyEventArgs e)
        {
            GridView view = sender as GridView;

            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (_user.DeleteFreqs)
                {
                    DataSet ds = Helpers.Functions.fill(string.Format("select dbo.getFreqUsageStats({0})", view.GetDataRow(view.FocusedRowHandle)["id"]), DataBase.Properties.Settings.Default.OfficeConnectionString.ToString());
                    if (Convert.ToInt32(ds.Tables[0].Rows[0][0].ToString()) > 0)
                    {
                        MessageBox.Show("სიხშირე არის გამოყენებაში, ჯერ უნდა წაშალოთ სადგური რათა წაიშალოს სიხშირე.", "შეცდომა");
                        return;
                    }
                    ds.Dispose();


                    if (MessageBox.Show("გსურთ ამ სიხშირის წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                      DialogResult.Yes)
                        return;
                    //ExpandCollapseAllRows(view, false);
                    view.DeleteRow(view.FocusedRowHandle);
                    this.fls_LICENCE_FREQTableAdapter.Update(this.officeDataSet.fls_LICENCE_FREQ);
                }
                else MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

            if (e.Control && (e.KeyCode == Keys.C || e.KeyCode == Keys.Insert) && !view.IsEditing)
            {
                string selectedCellsText = GetSelectedValues(view);
                Clipboard.SetDataObject(selectedCellsText);
                e.Handled = true;
            }

        }

        private void licenceView_MouseUp(object sender, MouseEventArgs e)
        {
            GridView view = sender as GridView;
            Point p = view.GridControl.PointToClient(MousePosition);
            GridHitInfo info = view.CalcHitInfo(p);

            if (_user.ReestritCheck && info.HitTest == GridHitTest.RowCell && e.Button == System.Windows.Forms.MouseButtons.Right)
            {
                licReestrMenuStrip.Show(new Point(e.X, ribbon.Height + e.Y));
            }
        }


        private void mainView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (_user.DelComp)
                {
                    if (MessageBox.Show("გსურთ წაშლა?", "Confirmation", MessageBoxButtons.YesNo) !=
                      DialogResult.Yes)
                        return;
                    GridView view = sender as GridView;
                    ExpandCollapseAllRows(view, false);
                    view.DeleteRow(view.FocusedRowHandle);
                    this.fls_COMPANY_INFOTableAdapter.Update(this.officeDataSet.fls_COMPANY_INFO);
                }
                else MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void mainView_DoubleClick(object sender, EventArgs e)
        {
            if (_user.EditComp)
            {
                GridView view = gridControl.FocusedView as GridView;
                fls_COMPANY_INFOBindingSource.Position = this.fls_COMPANY_INFOBindingSource.Find("id", Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]));
                frmCompany co = new frmCompany(ref this.fls_COMPANY_INFOBindingSource);
                if (co.ShowDialog() == DialogResult.OK) this.fls_COMPANY_INFOTableAdapter.Update(this.officeDataSet.fls_COMPANY_INFO);
            }
            else
                MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void licenceView_DoubleClick(object sender, EventArgs e)
        {
            if (_user.EditFreqLic)
            {
                GridView view = gridControl.FocusedView as GridView;
                this.fls_LICENCE_INFOBindingSource.Position = this.fls_LICENCE_INFOBindingSource.Find("id", Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]));
                arcButtonItem_ItemClick(sender, null);
                frmEditLicence li = new frmEditLicence(ref this.fls_LICENCE_INFOBindingSource);
                if (li.ShowDialog() == DialogResult.OK) this.fls_LICENCE_INFOTableAdapter.Update(this.officeDataSet.fls_LICENCE_INFO);
            }
            else
                MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void freqsView_DoubleClick(object sender, EventArgs e)
        {
            if (_user.EditFreqs)
            {
                GridView view = gridControl.FocusedView as GridView;
                this.fls_LICENCE_FREQBindingSource.Position = this.fls_LICENCE_FREQBindingSource.Find("id", Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]));
                frmEditFreq fr = new frmEditFreq(ref this.fls_LICENCE_FREQBindingSource, _user);
                if (fr.ShowDialog() == DialogResult.OK) this.fls_LICENCE_FREQTableAdapter.Update(this.officeDataSet.fls_LICENCE_FREQ);
            }
            else
                MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        #endregion GridEvents



        #region CustomFunctions

        protected void DisableEnableCommandsDependingOnCurrentViewAndSelectedRows(object sender, string funcName)
        {
            GridView gridView = this.gridControl.FocusedView as GridView;
            try
            {
                if (gridView.FocusedRowHandle >= 0)
                {
                    object obj = gridView.GetDataRow(gridView.FocusedRowHandle)["id"];
                }
            }
            catch { }
            if (gridView.ParentView != null)
            {
                BaseView parentView = gridView.ParentView;
            }


            techButtonItem.Enabled = gridView.Name.Equals("mainView");
            actButtonItem.Enabled = gridView.Name.Equals("mainView");
            pdfButton.Enabled = gridView.Name.Equals("verificationView");
            if (pdfButton.Down && !gridView.Name.Equals("verificationView")) pdfButton.Down = false;
            compButtonItem.Enabled = gridView.Name.Equals("mainView");
            licButtonItem.Enabled = gridView.Name.Equals("mainView");
            freqButtonItem.Enabled = gridView.Name.Equals("licenceView");
            dec_ButtonItem.Enabled = gridView.Name.Equals("licenceView");
            printButtonItem.Enabled = gridView.Name.Equals("licenceView") || gridView.Name.Equals("mainView");
            adminStationsPage.Visible = gridView.Name.Equals("licenceView");
            if (gridView.Name.Equals("licenceView") && _user.EditLicence)
            {
                try
                {
                    string s1 = Convert.ToDateTime(gridView.GetDataRow(gridView.FocusedRowHandle)["LIC_ISSU_DATE"]).ToString();
                    string s2 = Convert.ToDateTime(gridView.GetDataRow(gridView.FocusedRowHandle)["LIC_EXPIRY_DATE"]).ToString();
                    arcButtonItem.Enabled = true;
                    return;
                }
                catch { }
            }
            arcButtonItem.Enabled = false;
        }

        protected void performSearch(string txt)
        {
            int i = 0;
            foreach (string s in criteriasListItem.Strings)
                if (s == criteriasListItem.Caption) break;
                else i++;

            switch (i)
            {
                //kompaniis saxelis mixedvit
                case 0:
                    //fls_COMPANY_INFOBindingSource.Filter = string.Format("Comp_Name LIKE '%{0}%'", txt);
                    mainView.Columns["Comp_Name"].FilterInfo =
                        new DevExpress.XtraGrid.Columns.ColumnFilterInfo(string.Format("[Comp_Name] LIKE '%{0}%'", txt));
                    break;

                //sagadasaxado kodis mixedvit
                case 1:
                    mainView.Columns["tax_id"].FilterInfo =
                        new DevExpress.XtraGrid.Columns.ColumnFilterInfo(string.Format("[tax_id] LIKE '%{0}%'", txt));
                    break;

                //licenziis nomris mixedvit
                case 2:
                    ExpandCollapseAllRows(mainView, false);
                    licenceView.Columns["LICENCE"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(string.Format("[LICENCE] LIKE '%{0}%'", txt));
                    fls_LICENCE_INFOBindingSource.Filter = string.Format("LICENCE LIKE '%{0}%'", txt);
                    string texti = "[id]=-1";
                    for (int index = 0; index < fls_LICENCE_INFOBindingSource.Count; index++)
                    {
                        fls_LICENCE_INFOBindingSource.Position = index;
                        int id = ((OfficeDataSet.fls_LICENCE_INFORow)((DataRowView)fls_LICENCE_INFOBindingSource.Current).Row).comp_id;
                        texti += " or [id]=" + id;
                    }
                    mainView.Columns["id"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(texti);
                    break;

                //sixshiris mixedvit
                case 3:
                    if (!IsDigitsOnly(txt))
                    {
                        MessageBox.Show("სიშირე უნდა შეიცავდეს მხოლოდ რიცხვებს!", "შეცდომა",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        break;
                    }
                    ExpandCollapseAllRows(mainView, false);
                    freqsView.Columns["FREQ"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(string.Format("[FREQ]={0}", txt));
                    fls_LICENCE_FREQBindingSource.Filter = string.Format("FREQ={0}", txt);
                    string text0 = "[id]=-1";
                    for (int index0 = 0; index0 < fls_LICENCE_FREQBindingSource.Count; index0++)
                    {
                        fls_LICENCE_FREQBindingSource.Position = index0;
                        int licence_id = ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).licence_id;
                        text0 += " or [id]=" + licence_id;
                    }
                    Debug.WriteLine(text0);


                    licenceView.Columns["LICENCE"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(text0);
                    fls_LICENCE_INFOBindingSource.Filter = text0;
                    string text2 = "[id]=-1";
                    for (int index = 0; index < fls_LICENCE_INFOBindingSource.Count; index++)
                    {
                        fls_LICENCE_INFOBindingSource.Position = index;
                        int id = ((OfficeDataSet.fls_LICENCE_INFORow)((DataRowView)fls_LICENCE_INFOBindingSource.Current).Row).comp_id;
                        text2 += " or [id]=" + id;
                    }
                    Debug.WriteLine(text2);
                    mainView.Columns["id"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(text2);
                    searchEdit.ItemAppearance.Normal.BackColor = Color.Red;
                    break;

                default: Debug.WriteLine("no case for filter"); break;
            }

            gridControl.LookAndFeel.SkinName = "Office 2010 Silver";
        }

        protected bool IsDigitsOnly(string str)
        {
            foreach (char c in str)
            {
                if (c < '0' || c > '9')
                    return false;
            }

            return true;
        }

        private void ExpandCollapseAllRows(GridView View, bool expand)
        {
            View.BeginUpdate();
            try
            {
                int dataRowCount = View.DataRowCount;
                for (int rowHandle = 0; rowHandle < dataRowCount; ++rowHandle)
                    View.SetMasterRowExpanded(rowHandle, expand);
            }
            finally
            {
                View.EndUpdate();
            }
        }



        private void markAllReestritToolStripMenuItem_Click(object sender, EventArgs e)
        {
            reestritChange(true);
        }

        private void unmarkAllReestritToolStripMenuItem_Click(object sender, EventArgs e)
        {
            reestritChange(false);
        }

        private void reestritChange(bool reestrit)
        {
            GridView view = gridControl.FocusedView as GridView;

            fls_LICENCE_FREQBindingSource.Filter = "licence_id =" + view.GetDataRow(view.FocusedRowHandle)["id"];
            Debug.WriteLine(fls_LICENCE_FREQBindingSource.Count);
            for (int i = 0; i < fls_LICENCE_FREQBindingSource.Count; i++)
            {
                fls_LICENCE_FREQBindingSource.Position = i;
                ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).reestrit = reestrit;
                fls_LICENCE_FREQTableAdapter.Update(officeDataSet.fls_LICENCE_FREQ);

            }
            fls_LICENCE_FREQBindingSource.RemoveFilter();
        }

        private void initiateStationsPlot()
        {
            GridView view = gridControl.FocusedView as GridView;
            int mimdinare = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
            fixed_rel_linksTableAdapter.FillByLic(officeDataSet.Fixed_rel_links, mimdinare);

            workerThread = new Thread(() => plotStationOnMap(mimdinare));
            workerThread.Start();
            Thread.Sleep(50);
        }

        private void plotStationOnMap(int row)
        {
            this.BeginInvoke((Action)delegate() { mapControl.Enabled = false; mapControl.SuspendLayout(); });

            DevExpress.XtraMap.VectorItemsLayer itemsLayer = mapControl.Layers[1] as DevExpress.XtraMap.VectorItemsLayer;
            DevExpress.XtraMap.MapItemStorage storage = new DevExpress.XtraMap.MapItemStorage();
            itemsLayer.Data = storage;


            storage.Items.BeginUpdate();
            DataSet ds = HelperFunctions.fill("SELECT * FROM Fixed_rel_links WHERE (Alic_id = " + row + ") OR (Blic_id = " + row + ") ORDER BY link_id, AName, BName", DataBase.Properties.Settings.Default.OfficeConnectionString);
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                DevExpress.XtraMap.MapLine link = new DevExpress.XtraMap.MapLine();

                DevExpress.XtraMap.MapPushpin pin1 = new DevExpress.XtraMap.MapPushpin();
                pin1.Image = rel_fixed;
                pin1.Location = new DevExpress.XtraMap.GeoPoint(Convert.ToDouble(ds.Tables[0].Rows[i]["Alat"]), Convert.ToDouble(ds.Tables[0].Rows[i]["Alon"]));
                pin1.ToolTipPattern = ds.Tables[0].Rows[i]["AName"].ToString();
                pin1.Attributes.Add(new MapItemAttribute()
                {
                    Name = "idAttrName",
                    Type = typeof(int),
                    Value = Convert.ToInt32(ds.Tables[0].Rows[i]["Aid"])
                });
                link.Point1 = pin1.Location;


                DevExpress.XtraMap.MapPushpin pin2 = new DevExpress.XtraMap.MapPushpin();
                pin2.Image = rel_fixed;
                pin2.Location = new DevExpress.XtraMap.GeoPoint(Convert.ToDouble(ds.Tables[0].Rows[i]["Blat"]), Convert.ToDouble(ds.Tables[0].Rows[i]["Blon"]));
                pin2.ToolTipPattern = ds.Tables[0].Rows[i]["BName"].ToString();
                pin2.Attributes.Add(new MapItemAttribute()
                {
                    Name = "idAttrName",
                    Type = typeof(int),
                    Value = Convert.ToInt32(ds.Tables[0].Rows[i]["Bid"])
                });
                link.Point2 = pin2.Location;

                link.Stroke = Color.Red;
                link.StrokeWidth = 3;
                link.SelectedStrokeWidth = 3;
                link.ToolTipPattern = ds.Tables[0].Rows[i]["LinkName"].ToString();
                link.Attributes.Add(new MapItemAttribute()
                {
                    Name = "idAttrName",
                    Type = typeof(int),
                    Value = Convert.ToInt32(ds.Tables[0].Rows[i]["link_id"])
                });
                //link.TitleOptions.Visibility = VisibilityMode.Auto;
                //link.TitleOptions.Pattern = ds.Tables[0].Rows[i]["LinkName"].ToString();


                storage.Items.Add(link);
                storage.Items.Add(pin1);
                storage.Items.Add(pin2);

            }
            storage.Items.EndUpdate();


            this.BeginInvoke((Action)delegate() { mapControl.Enabled = true; mapControl.ResumeLayout(); });
        }

        private int GetRowHandleByColumnValue(GridView view, string ColumnFieldName, object value)
        {
            int result = -1;
            for (int i = 0; i < view.RowCount; i++)
                if (view.GetDataRow(i)[ColumnFieldName].Equals(value))
                    return i;
            return result;
        }

        protected void gotofreq(object sender, ShowFreqArgs e) 
        {
            this.BeginInvoke((Action)delegate()
            {
                if (e.freqID >= 0)
                {
                    ExpandCollapseAllRows(mainView, false);
                    freqsView.Columns["id"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(string.Format("[id]={0}", e.freqID));
                    fls_LICENCE_FREQBindingSource.Filter = string.Format("id={0}", e.freqID);

                    int licence_id = ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).licence_id;
                    string text0 = "[id]=" + licence_id;
                    Debug.WriteLine(text0);


                    licenceView.Columns["LICENCE"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(text0);
                    fls_LICENCE_INFOBindingSource.Filter = text0;
                    int id = ((OfficeDataSet.fls_LICENCE_INFORow)((DataRowView)fls_LICENCE_INFOBindingSource.Current).Row).comp_id;
                    string text2 = "[id]=" + id;

                    Debug.WriteLine(text2);
                    mainView.Columns["id"].FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo(text2);
                    searchEdit.ItemAppearance.Normal.BackColor = Color.Red;


                    ExpandCollapseAllRows(freqsView, true);
                    ExpandCollapseAllRows(licenceView, true);
                    ExpandCollapseAllRows(mainView, true);

                    clearSearchButtonItem.Enabled = true;

                    Helpers.Functions.bringWindowToFront(this, FormWindowState.Maximized);
                }
            });
        }

        private string GetSelectedValues(GridView view)
        {
            if (view.SelectedRowsCount == 0) return "";

            const string CellDelimiter = "\t";
            const string LineDelimiter = "\r\n";
            string result = "";

            // iterate cells and compose a tab delimited string of cell values
            for (int i = view.SelectedRowsCount - 1; i >= 0; i--)
            {
                int row = view.GetSelectedRows()[i];
                for (int j = 0; j < view.VisibleColumns.Count; j++)
                {
                    result += view.GetRowCellDisplayText(row, view.VisibleColumns[j]);
                    if (j != view.VisibleColumns.Count - 1)
                        result += CellDelimiter;
                }
                if (i != 0)
                    result += LineDelimiter;
            }
            return result;
        }


        #endregion



        private void actButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (_user.AddFreq)
            {
                fls_verificationActBindingSource.AddNew();
                ((OfficeDataSet.fls_verificationActRow)((DataRowView)fls_verificationActBindingSource.Current).Row).comp_id = Convert.ToInt32(mainView.GetDataRow(mainView.FocusedRowHandle)["id"]);

                frmAct f = new frmAct(ref fls_verificationActBindingSource);
                if (f.ShowDialog() == DialogResult.OK) this.fls_verificationActTableAdapter.Update(this.officeDataSet.fls_verificationAct);
                else fls_verificationActBindingSource.CancelEdit();
            }
            else
            {
                MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void allActsButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            frmAllActs f = new frmAllActs();
            f.ShowDialog();
        }

        private void pdfButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            GridView focusedView = this.gridControl.FocusedView as GridView;
            int id = Convert.ToInt32(focusedView.GetDataRow(focusedView.FocusedRowHandle)["id"]);
            this.fls_verificationActBindingSource.Position = this.fls_verificationActBindingSource.Find("id", id);
            DataSet dataSet = HelperFunctions.fill("select top 1 pdf from fls_verificationAct WHERE id = " + id, DataBase.Properties.Settings.Default.OfficeConnectionString);
      
            //tu ar akvs pdf-i
            if (dataSet.Tables[0].Rows[0]["pdf"].ToString() == "" && this._user.AddFreq)
            {
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    FileStream stream = File.OpenRead(openFileDialog.FileName);
                    byte[] fileBytes = new byte[stream.Length];
                    stream.Read(fileBytes, 0, fileBytes.Length);
                    stream.Close();
                    //fls_verificationActBindingSource.Position = this.fls_verificationActBindingSource.Find("id", id);
                    ((OfficeDataSet.fls_verificationActRow)((DataRowView)fls_verificationActBindingSource.Current).Row).pdf = fileBytes;
                    fls_verificationActBindingSource.EndEdit();
                    fls_verificationActTableAdapter.Update(this.officeDataSet.fls_verificationAct);

                    MemoryStream ms = new MemoryStream(fileBytes);
                    pdfViewer.LoadDocument(ms);
                }
                else pdfButton.Down = false;
            }
            //tu ara mashin vanaxot pdf faili
            else
            {
                if (!(dataSet.Tables[0].Rows[0]["pdf"].ToString() != "")) return;
                dataSet.Clear();
                this.pdfViewer.LoadDocument((Stream)new MemoryStream(HelperFunctions.fill("select top 1 pdf from fls_verificationAct WHERE id = " + id, DataBase.Properties.Settings.Default.OfficeConnectionString).Tables[0].Rows[0]["pdf"] as byte[]));
      
            }
        }

        private void pdfButton_DownChanged(object sender, ItemClickEventArgs e)
        {
            if (pdfButton.Down)
            {
                splitContainerControl.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Both;
                pdfRibbonPage.Visible = true;
                delPdfButton.Enabled = true;
            }
            else
            {
                splitContainerControl.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Panel1;
                pdfRibbonPage.Visible = false;
                delPdfButton.Enabled = false;
                pdfViewer.DocumentFilePath = null;
            }
        }

        private void delPdfButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (_user.AddFreq)
            {
                if (MessageBox.Show("გსურთ მიმაგრებული PDF დოკუმენტის წაშლა?", "დადასტურება", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) ==
                      DialogResult.Yes)
                {
                    GridView view = gridControl.FocusedView as GridView;
                    int id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
                    fls_verificationActBindingSource.Position = this.fls_verificationActBindingSource.Find("id", id);
                    ((OfficeDataSet.fls_verificationActRow)((DataRowView)fls_verificationActBindingSource.Current).Row).pdf = null;
                    fls_verificationActBindingSource.EndEdit();
                    fls_verificationActTableAdapter.Update(this.officeDataSet.fls_verificationAct);
                    pdfButton.Down = false;
                }
            }
            else
            {
                MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void compButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (_user.EditComp)
            {
                this.fls_COMPANY_INFOBindingSource.AddNew();
                frmCompany co = new frmCompany(ref this.fls_COMPANY_INFOBindingSource);
                if (co.ShowDialog() == DialogResult.OK) this.fls_COMPANY_INFOTableAdapter.Update(this.officeDataSet.fls_COMPANY_INFO);
            }
        }

        private void licButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (_user.EditFreqLic)
            {
                GridView view = gridControl.FocusedView as GridView;
                int company = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
                this.fls_LICENCE_INFOBindingSource.AddNew();
                ((OfficeDataSet.fls_LICENCE_INFORow)((DataRowView)fls_LICENCE_INFOBindingSource.Current).Row).comp_id = company;
                frmEditLicence li = new frmEditLicence(ref this.fls_LICENCE_INFOBindingSource);
                if (li.ShowDialog() == DialogResult.OK) this.fls_LICENCE_INFOTableAdapter.Update(this.officeDataSet.fls_LICENCE_INFO);

            }
            else
            {
                MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void freqButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (_user.AddFreq)
            {
                GridView view = gridControl.FocusedView as GridView;
                int id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
                this.fls_LICENCE_FREQBindingSource.AddNew();
                /*if (f > 0 && bwth > 0)
                {
                    ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).FREQ = f;
                    ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).BandWidth = bwth;
                    ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).reestrit = rees;
                }*/
                ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).licence_id = id;
                frmEditFreq fr = new frmEditFreq(ref this.fls_LICENCE_FREQBindingSource, _user);
                if (fr.ShowDialog() == DialogResult.OK)
                {
                    //f = ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).FREQ;
                    //bwth = ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).BandWidth;
                    //rees = ((OfficeDataSet.fls_LICENCE_FREQRow)((DataRowView)fls_LICENCE_FREQBindingSource.Current).Row).reestrit;
                    this.fls_LICENCE_FREQTableAdapter.Update(this.officeDataSet.fls_LICENCE_FREQ);
                }
            }
            /*else if ((gridEX1.CurrentTable.Key.ToString() == "FK_acc_Letters_fls_COMPANY_INFO" || gridEX1.CurrentTable.Key.ToString() == "acc_Letters") && user.Nebartva)
            {
                this.acc_FREQBindingSource.AddNew();
                ((OfficeDataSet.acc_FREQRow)((DataRowView)acc_FREQBindingSource.Current).Row).letter_id = Convert.ToInt32(gridEX1.GetValue("id"));
                frmEditFreq fr = new frmEditFreq(ref this.acc_FREQBindingSource, user, true);
                if (fr.ShowDialog() == DialogResult.OK) this.acc_FREQTableAdapter.Update(this.officeDataSet.acc_FREQ);
            }*/
            else MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void mainView_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            //Debug.WriteLine("unbound");
            GridView view = sender as GridView;

            int rowInMain = view.GetRowHandle(e.ListSourceRowIndex);
            GridView details = view.GetDetailView(rowInMain, 0) as GridView;

            if (details != null && e.Column.FieldName == "lics" && e.IsGetData)
                e.Value = details.Name;
        }

        private void clearSearchButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            mainView.ActiveFilter.Clear();
            licenceView.ActiveFilter.Clear();
            freqsView.ActiveFilter.Clear();

            fls_COMPANY_INFOBindingSource.RemoveFilter();
            fls_LICENCE_INFOBindingSource.RemoveFilter();
            fls_LICENCE_FREQBindingSource.RemoveFilter();

            gridControl.LookAndFeel.SkinName = "Office 2010 Blue";
            searchEdit.EditValue = "";
            clearSearchButtonItem.Enabled = false;
            //criteriasListItem.Caption = "ორგანიზაციის დასახელება";

            mainView.MoveFirst();
            searchEdit.Links[0].Focus();
        }

        private void criteriasListItem_ListItemClick(object sender, ListItemClickEventArgs e)
        {
            criteriasListItem.Caption = criteriasListItem.Strings[e.Index];
            searchEdit.Links[0].Focus();
        }

        private void filterTextEditItem_KeyUp(object sender, KeyEventArgs e)
        {
            string text = (sender as DevExpress.XtraEditors.TextEdit).Text;
            bool textEntered = !text.Trim().Equals("");
            clearSearchButtonItem.Enabled = textEntered;
            if (!textEntered) clearSearchButtonItem_ItemClick(sender, null);

            int keyValue = (int)e.KeyValue;
            /*if ((keyValue >= 0x30 && keyValue <= 0x39) // numbers
             || (keyValue >= 0x41 && keyValue <= 0x5A) // letters
             || (keyValue >= 0x60 && keyValue <= 0x69) && !text.Trim().Equals(""))*/
            if (!text.Trim().Equals(""))
            {
                ExpandCollapseAllRows(mainView, false);
                performSearch(text.Trim());
            }
        }

        private void arcButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            GridView view = gridControl.FocusedView as GridView;
            int mimdinare = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);

            fls_LICENCE_INFOBindingSource.Position = this.fls_LICENCE_INFOBindingSource.Find("id", mimdinare);
            int raod = 0;
            try
            {
                raod = (Int32)this.arc_fls_LICENCE_INFOTableAdapter.ifPresentInArchieve(((OfficeDataSet.fls_LICENCE_INFORow)((DataRowView)fls_LICENCE_INFOBindingSource.Current).Row).LICENCE, ((OfficeDataSet.fls_LICENCE_INFORow)((DataRowView)fls_LICENCE_INFOBindingSource.Current).Row).LIC_ISSU_DATE, ((OfficeDataSet.fls_LICENCE_INFORow)((DataRowView)fls_LICENCE_INFOBindingSource.Current).Row).LIC_EXPIRY_DATE);
            }
            catch { return; }

            if (raod == 0)
            {
                DataSet ds = HelperFunctions.fill("INSERT INTO arc_fls_LICENCE_INFO " +
                    "(LICENCE, LIC_ISSU_DATE, LIC_EXPIRY_DATE, COMMENTS, comp_id) " +
                    "SELECT        LICENCE, LIC_ISSU_DATE, LIC_EXPIRY_DATE, COMMENTS, comp_id " +
                    "FROM            fls_LICENCE_INFO " +
                    "WHERE        (id = " + mimdinare.ToString() + "); select id=scope_identity()", DataBase.Properties.Settings.Default.OfficeConnectionString.ToString());
                int LastID = Convert.ToInt32(ds.Tables[0].Rows[0][0]);
                ds.Clear();

                DataSet ds1 = HelperFunctions.fill("INSERT INTO [arc_fls_LICENCE_FREQ] ([FREQ], [BandWidth], [power], [remark], [reestrit], [licence_id], [city_id]) " +
                    "SELECT FREQ, BandWidth, power, remark, reestrit, " + LastID.ToString() + ", city_id FROM fls_LICENCE_FREQ " +
                    "WHERE        (licence_id = " + mimdinare.ToString() + "); select id=scope_identity()", DataBase.Properties.Settings.Default.OfficeConnectionString.ToString());
                ds1.Clear();


                this.arc_fls_LICENCE_INFOTableAdapter.Fill(this.officeDataSet.arc_fls_LICENCE_INFO);
                this.arc_fls_LICENCE_FREQTableAdapter.Fill(this.officeDataSet.arc_fls_LICENCE_FREQ);

                arc_licenceView.RefreshData();
            }
        }

        private void dec_ButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            GridView view = gridControl.FocusedView as GridView;

            FREQVIEW fr = new FREQVIEW();
            fr.LICENCE = view.GetDataRow(view.FocusedRowHandle)["LICENCE"].ToString();

            string s = view.GetDataRow(view.FocusedRowHandle)["LIC_ISSU_DATE"].ToString();
            if (s != "")
            {
                s = s.Substring(0, s.IndexOf(" "));
                fr.LIC_ISSU_DATE = s.Replace(".", "-");
            }
            Debug.WriteLine(fr.LIC_ISSU_DATE, "#####");
            s = view.GetDataRow(view.FocusedRowHandle)["LIC_EXPIRY_DATE"].ToString();
            if (s != "")
            {
                s = s.Substring(0, s.IndexOf(" "));
                fr.LIC_EXPIRY_DATE = s.Replace(".", "-");
            }
            Debug.WriteLine(fr.LIC_EXPIRY_DATE, "#####");

            decision dec = new decision();
            dec.ShowDecision(fr);
        }

        private void printButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            DataSet ds = new DataSet();
            GridView view = gridControl.FocusedView as GridView;

            progress progForm = new progress("მიმდინარეობს ინიციალიზაცია...");
            progForm.Show();
            progForm.Refresh();

            string connectionstring = DataBase.Properties.Settings.Default.OfficeConnectionString.ToString();
            SqlConnection northwindConnection = new SqlConnection(connectionstring);
            string strSQL = "";
            RepPreview preview = new RepPreview();


            if (view.Name.Equals("mainView"))
            {
                strSQL = "select * from FLS_COMPANY_INFO where id=" + view.GetDataRow(view.FocusedRowHandle)["id"] + ";" +
                                "select * from COMBO_CompAccount;";
            }
            else
                if (view.Name.Equals("licenceView"))
                {
                    strSQL = "SELECT     id, LICENCE, CAST(LIC_ISSU_DATE AS varchar(12)) AS LIC_ISSU_DATE, CAST(LIC_EXPIRY_DATE AS varchar(12)) AS LIC_EXPIRY_DATE, COMMENTS, comp_id FROM fls_LICENCE_INFO where id=" + view.GetDataRow(view.FocusedRowHandle)["id"] + ";" +
                             "select dbo.frequency(FREQ) as FREQ, dbo.frequency(BandWidth) as BandWidth, function_getCityName, remark, licence_id from fls_LICENCE_FREQ;" +
                             "select * from fls_COMPANY_INFO where id=" + view.GetDataRow(view.FocusedRowHandle)["comp_id"];
                }
            SqlCommand cmd = new SqlCommand(strSQL, northwindConnection);
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(ds);
            if (view.Name.Equals("mainView"))
            {
                compInfo CompRep = new compInfo();
                CompRep.Database.Tables["FLS_COMPANY_INFO"].SetDataSource(ds.Tables[0]);
                CompRep.Database.Tables["COMBO_CompAccount"].SetDataSource(ds.Tables[1]);
                preview.crystalReportViewer.ReportSource = CompRep;
            }
            else
                if (view.Name.Equals("licenceView"))
                {
                    licReport LicRep = new licReport();
                    LicRep.Database.Tables["fls_LICENCE_INFO"].SetDataSource(ds.Tables[0]);
                    LicRep.Database.Tables["fls_LICENCE_FREQ"].SetDataSource(ds.Tables[1]);
                    LicRep.Database.Tables["fls_COMPANY_INFO"].SetDataSource(ds.Tables[2]);
                    preview.crystalReportViewer.ReportSource = LicRep;
                }

            progForm.Close();
            preview.ShowDialog();

        }

        private void techButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            GridView view = gridControl.FocusedView as GridView;
            if (view.Name.Equals("mainView"))
            {
                if (_user.EditFreqs)
                {
                    TechData td = new TechData(view.GetDataRow(view.FocusedRowHandle)["tax_id"].ToString());
                    td.ShowDialog();
                }
                else
                    MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void cutButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (!_user.EditFreqs || !_user.EditLicence || !_user.EditFreqLic || !_user.EditFreqComp) return;

            GridView view = gridControl.FocusedView as GridView;
            pasteButtonItem.Enabled = false;
            lic = null;
            freq = null;
            if (view.Name.Equals("licenceView"))
            {
                lic = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
                pasteButtonItem.Enabled = true;
            }
            else if (view.Name.Equals("freqsView"))
            {
                freq = new int[view.SelectedRowsCount];
                for (int i = 0; i < view.SelectedRowsCount; i++)
                    freq[i] = Convert.ToInt32(view.GetDataRow(view.GetRowHandle(view.GetSelectedRows()[i]))["id"]);
                pasteButtonItem.Enabled = true;
            }
        }

        private void pasteButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            progress progForm = new progress("გთხოვთ დაელოდოთ...");
            progForm.Show();
            progForm.Refresh();

            GridView view = gridControl.FocusedView as GridView;
            int mimdinare = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
            if (view.Name.Equals("mainView") && lic >= 0 && _user.EditLicence)
            {
                officeDataSet.EnforceConstraints = false;
                this.fls_LICENCE_INFOTableAdapter.UpdateParenteness(mimdinare, (int)lic);
                this.fls_LICENCE_INFOTableAdapter.Fill(officeDataSet.fls_LICENCE_INFO);
                officeDataSet.EnforceConstraints = true;
                lic = null;
            }
            else if (view.Name.Equals("licenceView") && freq.Length >= 0 && _user.EditFreqs)
            {
                for (int i = 0; i < freq.Length; i++)
                {
                    progForm.Refresh();
                    officeDataSet.EnforceConstraints = false;
                    this.fls_LICENCE_FREQTableAdapter.UpdateParenteness(mimdinare, freq[i]);
                    this.fls_LICENCE_FREQTableAdapter.Fill(officeDataSet.fls_LICENCE_FREQ);
                    officeDataSet.EnforceConstraints = true;
                }
                freq = null;
            }
            pasteButtonItem.Enabled = false;

            progForm.Close();
        }

        private void ribbon_Paint(object sender, PaintEventArgs e)
        {
            if (_NeedShowEditor)
            {
                BeginInvoke(new MethodInvoker(delegate
                {
                    BarEditItemLink link = searchEdit.Links[0] as BarEditItemLink;
                    link.ShowEditor();
                }));
                _NeedShowEditor = false;
            }
        }

        private void ribbon_SelectedPageChanged(object sender, EventArgs e)
        {
            if (ribbon.SelectedPage.Name.Equals("adminStationsPage"))
            {
                initiateStationsPlot();
                FixedLinksGridView_FocusedRowChanged(sender, null);
            }
            xtraTabControl.SelectedTabPageIndex = ribbon.SelectedPage.Name.Equals("adminStationsPage") ? 1 : 0;

        }

        private void mapControl_MouseUp(object sender, MouseEventArgs e)
        {
            MapHitInfo info = this.mapControl.CalcHitInfo(e.Location);
            if (info.InMapPushpin)
            {
                MapPushpin pin = (MapPushpin)info.MapPushpin;
                Debug.WriteLine(pin.Attributes["idAttrName"].Value.ToString(), "MapPushpin");

                int rowHandle = GetRowHandleByColumnValue(FixedLinksGridView, "Aid", pin.Attributes["idAttrName"].Value);
                if (rowHandle >= 0)
                {
                    FixedLinksGridView.FocusedRowHandle = rowHandle;
                    LinksGridControl.Focus();
                }
                else
                {
                    rowHandle = GetRowHandleByColumnValue(FixedLinksGridView, "Bid", pin.Attributes["idAttrName"].Value);
                    if (rowHandle >= 0)
                    {
                        FixedLinksGridView.FocusedRowHandle = rowHandle;
                        LinksGridControl.Focus();
                    }
                }
            }
            if (info.InMapLine)
            {
                MapLine line = (MapLine)info.MapLine;
                //Debug.WriteLine(line.Attributes["idAttrName"].Value.ToString(), "MapLine");

                int rowHandle = GetRowHandleByColumnValue(FixedLinksGridView, "link_id", line.Attributes["idAttrName"].Value);
                if (rowHandle >= 0)
                {
                    FixedLinksGridView.FocusedRowHandle = rowHandle;
                    LinksGridControl.Focus();
                }
            }

        }

        private void mapControl_MouseDown(object sender, MouseEventArgs e)
        {
            DevExpress.XtraMap.VectorItemsLayer itemsLayer = mapControl.Layers[0] as DevExpress.XtraMap.VectorItemsLayer;
            DevExpress.XtraMap.MapItemStorage storage = new DevExpress.XtraMap.MapItemStorage();
            itemsLayer.Data = storage;
        }




        private void admAddButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (!_user.admStAdd) return;

            GridView view = gridControl.FocusedView as GridView;
            int lic = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["id"]);
            int comp_id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["comp_id"]);
            frmRelLink frm = new frmRelLink(zCities, comp_id, lic, ref fls_LICENCE_FREQBindingSource, ref fls_LICENCE_FREQTableAdapter, this.officeDataSet.fls_LICENCE_FREQ);
            if (frm.ShowDialog() == DialogResult.OK)
            {
                this.fixed_rel_linksTableAdapter.FillByLic(this.officeDataSet.Fixed_rel_links, lic);
                ActiveControl = LinksGridControl;
                initiateStationsPlot();
                FixedLinksGridView.FocusedRowHandle = FixedLinksGridView.RowCount - 1;
            }
        }

        private void admEditButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (!_user.admStEdit) return;

            GridView view = LinksGridControl.FocusedView as GridView;
            GridView MainView = gridControl.FocusedView as GridView;
            int link_id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["link_id"]);
            int lic = Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["id"]);
            frmRelLink frm = new frmRelLink(zCities, Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["comp_id"]), lic, ref fls_LICENCE_FREQBindingSource, ref fls_LICENCE_FREQTableAdapter, this.officeDataSet.fls_LICENCE_FREQ, ((OfficeDataSet.Fixed_rel_linksRow)((DataRowView)fixed_rel_linksBindingSource.Current).Row).Aid, ((OfficeDataSet.Fixed_rel_linksRow)((DataRowView)fixed_rel_linksBindingSource.Current).Row).Bid, fixed_rel_linksBindingSource);
            if (frm.ShowDialog() == DialogResult.OK)
            {
                fixed_rel_linksTableAdapter.FillByLic(this.officeDataSet.Fixed_rel_links, lic);
                initiateStationsPlot();
                fixed_rel_linksBindingSource.Position = this.fixed_rel_linksBindingSource.Find("link_id", link_id);
                int rowHandle = GetRowHandleByColumnValue(FixedLinksGridView, "link_id", link_id);
                if (rowHandle >= 0) FixedLinksGridView.FocusedRowHandle = rowHandle;
            }
            ActiveControl = LinksGridControl;
        }

        private void FixedLinksGridView_DoubleClick(object sender, EventArgs e)
        {
            GridView view = LinksGridControl.FocusedView as GridView;
            try
            {
                int link_id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["link_id"]);
                admEditButtonItem_ItemClick(sender, null);
            }
            catch { }
        }

        private void FixedLinksGridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            admAddButtonItem.Enabled = _user.admStAdd;

            GridView view = LinksGridControl.FocusedView as GridView;
            int link_id;
            try
            {
                link_id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["link_id"]);
                admEditButtonItem.Enabled = _user.admStEdit;
                checkLinkButton.Enabled = _user.admStEdit;
                checkFreqAllocButton.Enabled = _user.admStEdit;
                admDelButtonItem.Enabled = _user.admStDel;
                admPrintButtonItem.Enabled = true;
                admExportButtonItem.Enabled = true;
                checkLinkButton.Enabled = true;


                DevExpress.XtraMap.VectorItemsLayer itemsLayer = mapControl.Layers[0] as DevExpress.XtraMap.VectorItemsLayer;
                DevExpress.XtraMap.MapItemStorage storage = new DevExpress.XtraMap.MapItemStorage();
                itemsLayer.Data = storage;
                DevExpress.XtraMap.MapLine link = new DevExpress.XtraMap.MapLine();
                link.Stroke = Color.Blue;
                link.StrokeWidth = 10;
                link.Point1 = new DevExpress.XtraMap.GeoPoint(Convert.ToDouble(view.GetDataRow(view.FocusedRowHandle)["Alat"]), Convert.ToDouble(view.GetDataRow(view.FocusedRowHandle)["Alon"]));
                link.Point2 = new DevExpress.XtraMap.GeoPoint(Convert.ToDouble(view.GetDataRow(view.FocusedRowHandle)["Blat"]), Convert.ToDouble(view.GetDataRow(view.FocusedRowHandle)["Blon"]));
                storage.Items.Add(link);

            }
            catch
            {
                admEditButtonItem.Enabled = false;
                checkLinkButton.Enabled = false;
                checkFreqAllocButton.Enabled = false;
                admDelButtonItem.Enabled = false;
                admPrintButtonItem.Enabled = false;
                admExportButtonItem.Enabled = false;
                checkLinkButton.Enabled = false;
            }
        }

        private void admDelButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            GridView view = LinksGridControl.FocusedView as GridView;

            int Aid = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["Aid"]);
            int Bid = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["Bid"]);
            if (_user.admStDel && MessageBox.Show("ნამდვილად გნებავთ ამ ჩანაწერის წაშლა?", "გთხოვთ დაადასტუროთ", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                HelperFunctions.ExecuteNonQuery(string.Format("delete from st_rel_fixed where id={0} or id={1}", Aid, Bid), DataBase.Properties.Settings.Default.OfficeConnectionString.ToString());
                GridView MainView = gridControl.FocusedView as GridView;
                int lic = Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["id"]);
                fixed_rel_linksTableAdapter.FillByLic(this.officeDataSet.Fixed_rel_links, lic);
                initiateStationsPlot();
            }
        }

        private void admPrintButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            GridView MainView = gridControl.FocusedView as GridView;
            int lic = Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["id"]);

            DataSet ds = new DataSet();
            string connectionstring = DataBase.Properties.Settings.Default.OfficeConnectionString.ToString();
            System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(connectionstring);
            SqlCommand cmd = new SqlCommand("select * from Fixed_rel_links where Alic_id=" + lic + " or Blic_id=" + lic + " order by AartNo, BartNo, link_id", conn);
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(ds);

            Reports.admStationsReport admRep = new Fams.Reports.admStationsReport();
            admRep.Database.Tables["Fixed_rel_links"].SetDataSource(ds.Tables[0]);
            Reports.RepPreview preview = new Fams.Reports.RepPreview();
            preview.crystalReportViewer.ReportSource = admRep;
            preview.ShowDialog();
        }

        private void admExportButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            GridView MainView = gridControl.FocusedView as GridView;
            int lic = Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["id"]);
            RelRoutines.export_stations(lic, DataBase.Properties.Settings.Default.OfficeConnectionString.ToString());
        }

        private void freqsView_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            if (e.Column.Name == "usageColumn" && e.IsGetData)
            {
                GridView view = sender as GridView;
                int freqID = Convert.ToInt32(view.GetRowCellValue(view.GetRowHandle(e.ListSourceRowIndex), colid1));

                DataSet ds = Helpers.Functions.fill(string.Format("select dbo.getFreqUsageStats({0})", freqID), DataBase.Properties.Settings.Default.OfficeConnectionString.ToString());
                e.Value = ds.Tables[0].Rows[0][0].ToString();
                ds.Dispose();
            }
        }

        private void usageCheckItem_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            usageColumn.Visible = usageCheckItem.Checked;
            if (usageCheckItem.Checked)
                freqsView.CustomUnboundColumnData += new DevExpress.XtraGrid.Views.Base.CustomColumnDataEventHandler(freqsView_CustomUnboundColumnData);
            else freqsView.CustomUnboundColumnData -= freqsView_CustomUnboundColumnData;

        }

        private void frmOrgs_FormClosing(object sender, FormClosingEventArgs e)
        {
            common.goToCompFreqChange -= gotofreq;
        }

        private void calcButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            List<OfficeDataSet.Fixed_rel_linksRow> rows = new List<OfficeDataSet.Fixed_rel_linksRow>();
            for (int i = 0; i < fixed_rel_linksBindingSource.Count; i++)
            {
                fixed_rel_linksBindingSource.Position = i;
                rows.Add((OfficeDataSet.Fixed_rel_linksRow)((DataRowView)fixed_rel_linksBindingSource.Current).Row);
            }


            frmCalcResults calc = new frmCalcResults(ref fixed_rel_linksBindingSource);
            calc.ShowDialog();
        }


        private void FixedLinksGridView_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            if (e.IsGetData)
            {
                e.Value = e.ListSourceRowIndex + 1;
            }
        }

        private void FixedLinksGridView_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Blue;
                e.Appearance.ForeColor = Color.White;
            }
        }






        private void EarthFormClosed(object sender, FormClosedEventArgs e)
        {
            earth.closeMap();
            earth = null;
        }


        private void barButtonItem1_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (_user != null)
            {
                GridView view = LinksGridControl.FocusedView as GridView;
                GridView MainView = gridControl.FocusedView as GridView;
                int link_id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["link_id"]);
                int lic = Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["id"]);
                EarthForm earth = new EarthForm(zCities, Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["comp_id"]), lic, ref fls_LICENCE_FREQBindingSource, ref fls_LICENCE_FREQTableAdapter, this.officeDataSet.fls_LICENCE_FREQ, ((OfficeDataSet.Fixed_rel_linksRow)((DataRowView)fixed_rel_linksBindingSource.Current).Row).Aid, ((OfficeDataSet.Fixed_rel_linksRow)((DataRowView)fixed_rel_linksBindingSource.Current).Row).Bid, fixed_rel_linksBindingSource);
                earth.ShowDialog();
            }
        }

        private void checkFreqAllocButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (_user != null)
            {
                GridView view = LinksGridControl.FocusedView as GridView;
                GridView MainView = gridControl.FocusedView as GridView;
                int link_id = Convert.ToInt32(view.GetDataRow(view.FocusedRowHandle)["link_id"]);
                int lic = Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["id"]);
                frmRelFreqAllocValidity validityForm = new frmRelFreqAllocValidity(zCities, Convert.ToInt32(MainView.GetDataRow(MainView.FocusedRowHandle)["comp_id"]), lic, ref fls_LICENCE_FREQBindingSource, ref fls_LICENCE_FREQTableAdapter, this.officeDataSet.fls_LICENCE_FREQ, ((OfficeDataSet.Fixed_rel_linksRow)((DataRowView)fixed_rel_linksBindingSource.Current).Row).Aid, ((OfficeDataSet.Fixed_rel_linksRow)((DataRowView)fixed_rel_linksBindingSource.Current).Row).Bid, fixed_rel_linksBindingSource);

                if (validityForm.ShowDialog() == DialogResult.OK)
                {
                    fixed_rel_linksTableAdapter.FillByLic(this.officeDataSet.Fixed_rel_links, lic);
                    initiateStationsPlot();
                    fixed_rel_linksBindingSource.Position = this.fixed_rel_linksBindingSource.Find("link_id", link_id);
                    int rowHandle = GetRowHandleByColumnValue(FixedLinksGridView, "link_id", link_id);
                    if (rowHandle >= 0) FixedLinksGridView.FocusedRowHandle = rowHandle;
                }
                ActiveControl = LinksGridControl;
            }
        }

        private void notProlongedBarButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            this.BringToFront();
            this.notProlongedBarButtonItem.Enabled = false;
            int num = (int)new frmNotProlonged().ShowDialog();
            this.notProlongedBarButtonItem.Enabled = true;
            this.BringToFront();
        }
























    }



}