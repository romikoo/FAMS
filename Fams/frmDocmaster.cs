using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net;
using System.IO;
using Newtonsoft.Json;
using System.Security.Cryptography;
using DataBase;
using System.Drawing.Imaging;
using Spire.Pdf;
using Helpers;
using System.Diagnostics;
using System.Data.SqlClient;

namespace Fams
{
    public partial class frmDocmaster : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        User user;

        public frmDocmaster(User us)
        {
            InitializeComponent();
            System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("ka-GE");
            System.Threading.Thread.CurrentThread.CurrentCulture = ci;
            System.Threading.Thread.CurrentThread.CurrentUICulture = ci;

            // This line of code is generated by Data Source Configuration Wizard
            letters_for_06TableAdapter.Fill(docmaster.Letters_for_06);

            // This line of code is generated by Data Source Configuration Wizard
            zone_CityTableAdapter.Fill(officeDataSet.Zone_City);
            acc_LettersTableAdapter.Fill(officeDataSet.acc_Letters);
            fls_COMPANY_INFOTableAdapter.Fill(officeDataSet.fls_COMPANY_INFO);

            user = us;
        }


        private void GetRequestStreamCallback(IAsyncResult asynchronousResult)
        {
            HttpWebRequest request = (HttpWebRequest)asynchronousResult.AsyncState;
            // End the stream request operation

            Stream postStream = request.EndGetRequestStream(asynchronousResult);


            // Create the post data
            //string postData = JsonConvert.SerializeObject(new loginObject("roman kurdadze", "Puw6e")).ToString();
            string postData = JsonConvert.SerializeObject(new loginObject(Properties.Settings.Default.doc_userName, Properties.Settings.Default.doc_password)).ToString();
            //MessageBox.Show(postData.ToString());
            byte[] byteArray = Encoding.ASCII.GetBytes(postData);


            postStream.Write(byteArray, 0, byteArray.Length);
            postStream.Close();

            //Start the web request
            request.BeginGetResponse(new AsyncCallback(GetResponceStreamCallback), request);
        }

        void GetResponceStreamCallback(IAsyncResult callbackResult)
        {
            HttpWebRequest request = (HttpWebRequest)callbackResult.AsyncState;
            HttpWebResponse response = (HttpWebResponse)request.EndGetResponse(callbackResult);

            string result;
            using (StreamReader httpWebStreamReader = new StreamReader(response.GetResponseStream()))
            {
                result = httpWebStreamReader.ReadToEnd();
                //this.BeginInvoke((Action)delegate() { richTextBox1.Text = result; }); 
            }

            try
            {
                var dict = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(result);
                string token = dict["authenticationAndAuthorities"]["token"];
                token = token.Replace(":", "%3A").Replace(" ", "+");


                int id = Convert.ToInt32(docmaster_gridView.GetDataRow(docmaster_gridView.GetRowHandle(docmaster_gridView.GetSelectedRows()[0]))["ID"]);
                WebRequest r = WebRequest.Create(string.Format(Properties.Settings.Default.doc_pdf_path, id, token));
                r.Credentials = CredentialCache.DefaultCredentials;
                Stream dataStream = r.GetResponse().GetResponseStream();


                File.Delete(@Properties.Settings.Default.doc_tmp_file);
                Stream output = File.OpenWrite(@Properties.Settings.Default.doc_tmp_file);
                dataStream.CopyTo(output);
                output.Close();
                response.Close();
                dataStream.Close();



                this.BeginInvoke((Action)delegate()
                {
                    try
                    {
                        pdfViewer1.LoadDocument(@Properties.Settings.Default.doc_tmp_file);
                        pdfViewer1.Visible = true;
                    }
                    catch (Exception ee) { MessageBox.Show("ERROR \n" + ee.Message); }
                    docmasterGridControl.Enabled = true;
                    docmasterGridControl.Focus();
                });

            }
            catch { return; }


        }

        private void showPdf(int handle)
        {

            if (Convert.ToBoolean(docmaster_gridView.GetDataRow(handle)["HasContent"]) && docmaster_gridView.RowCount > 0 && docmaster_gridView.GetSelectedRows().Length == 1)
            {
                docmasterGridControl.Enabled = false;
                pdfViewer1.DetachStreamAfterLoadComplete = true;
                pdfViewer1.ClearSelection();
                pdfViewer1.CloseDocument();
                var request = HttpWebRequest.Create(Properties.Settings.Default.doc_auth_path) as HttpWebRequest;
                request.Method = "POST";
                request.ContentType = "application/json";
                request.BeginGetRequestStream(new AsyncCallback(GetRequestStreamCallback), request);
            }
            else pdfViewer1.Visible = false;


        }


        private void docmaster_gridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            DisableEnableSaveBtn();

            if (docmaster_gridView.RowCount == 0) return;
            //textIDItem.Caption = docmaster_gridView.GetDataRow(e.FocusedRowHandle)["ID"].ToString();
            showPdf(docmaster_gridView.GetRowHandle(docmaster_gridView.GetSelectedRows()[0]));

            string currComp = docmaster_gridView.GetDataRow(e.FocusedRowHandle)["full_name"].ToString();
            FamsGridView.FindFilterText = string.Format("{0}", currComp);
            // FamsGridView.Columns["Comp_Name"].FilterInfo = 
            //   new DevExpress.XtraGrid.Columns.ColumnFilterInfo(string.Format("[Comp_Name] LIKE '%{0}%'", currComp));

           
        }

        private void docmaster_gridView_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            if (e.Column.Name == "flowColumn" && e.IsGetData)
            {
                DevExpress.XtraGrid.Views.Grid.GridView view = sender as DevExpress.XtraGrid.Views.Grid.GridView;
                int flow = Convert.ToInt32(view.GetRowCellValue(e.ListSourceRowIndex, colFlowDirectionID));

                if (flow == 0) e.Value = imageCollection1.Images[3];
                else e.Value = imageCollection1.Images[flow - 1];
            }
        }

        private void btnCopyLetter_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            // shemotsmeba tu aris ukve egeti tserili bazashi ##############
            DataSet ds = new DataSet();
            string connectionstring = DataBase.Properties.Settings.Default.OfficeConnectionString.ToString();
            SqlConnection northwindConnection = new SqlConnection(connectionstring);
            string strSQL = string.Format("select count(*) as raodenoba from acc_Letters where number=N'{0}'", docmaster_gridView.GetFocusedDataRow()["DocumentLabel"].ToString());
            Debug.WriteLine(strSQL);
            SqlCommand cmd = new SqlCommand(strSQL, northwindConnection);
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(ds);
            if (Convert.ToInt32(ds.Tables[0].Rows[0]["raodenoba"]) > 0)
            {
                MessageBox.Show("ამ ნომრის მქონე წერილი უკვე არსებობს ბაზაში, შეუძლებელია წერილების დუბლიკატების დამახსოვრება!", "WARNING", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            //shemotsmebulia ###############################################

            int row = -1;
            int parent_letter_id = -1;
            if (famsGridControl.FocusedView.Name.Equals("lettersGridView"))
            {
                DevExpress.XtraGrid.Views.Base.ColumnView detailView = FamsGridView.GetDetailView(FamsGridView.FocusedRowHandle, 1) as DevExpress.XtraGrid.Views.Base.ColumnView;
                row = detailView.FocusedRowHandle;
                parent_letter_id = Convert.ToInt32(detailView.GetDataRow(row)["id"]);
                Debug.WriteLine(parent_letter_id);
            }


            
            //if (gridEX1.CurrentLayout == gridEX1.Layouts["Letters"] && gridEX1.CurrentTable.Key.ToString() == "acc_Letters" && user.Nebartva)


            this.acc_LettersBindingSource.AddNew();
            if (row >= 0) ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).parent_letter_id = 
                parent_letter_id;
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).comp_id =
                (int)FamsGridView.GetFocusedDataRow()["id"];
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).number =
                    docmaster_gridView.GetFocusedDataRow()["DocumentLabel"].ToString();
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).received =
                        Convert.ToDateTime(docmaster_gridView.GetFocusedDataRow()["IssueDate"].ToString());
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).isReceived =
                (docmaster_gridView.GetFocusedDataRow()["FlowDirectionID"].ToString() == "3");
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).Annotation =
                            docmaster_gridView.GetFocusedDataRow()["Anotation"].ToString();
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).WhoSigned =
                                docmaster_gridView.GetFocusedDataRow()["WhoSigned"].ToString();
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).Receivers =
                                    docmaster_gridView.GetFocusedDataRow()["ReceiversRD"].ToString();
            ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).Resolution =
                                        docmaster_gridView.GetFocusedDataRow()["Resolution"].ToString();
            //tu esaa sub-letter
            if (parent_letter_id >= 0) ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).parent_letter_id = parent_letter_id;


            frmLetterNew frm = new frmLetterNew(ref this.acc_LettersBindingSource);
            if (frm.ShowDialog() == DialogResult.OK) this.acc_LettersTableAdapter.Update(this.officeDataSet.acc_Letters);


            


            if (Convert.ToBoolean(docmaster_gridView.GetDataRow(docmaster_gridView.GetRowHandle(docmaster_gridView.GetSelectedRows()[0]))["HasContent"]))
            {
                //პდფ-ის შენახვა
                PdfDocument pdfDoc = new PdfDocument();
                pdfDoc.LoadFromFile(Properties.Settings.Default.doc_tmp_file);
                for (int i = 0; i < pdfDoc.Pages.Count; i++)
                {
                    //Convert page to image
                    //Image jpgImage = pdfDoc.SaveAsImage(i, 240, 240);

                    //crop to remove lic notice ############################################
                    int toCrop = 36;
                    Bitmap src = (Bitmap)pdfDoc.SaveAsImage(i, 240, 240);
                    Rectangle cropRect = new Rectangle(0, toCrop, src.Width, src.Height - toCrop);
                    Bitmap target = new Bitmap(cropRect.Width, cropRect.Height);

                    using (Graphics g = Graphics.FromImage(target))
                    {
                        g.DrawImage(src, new Rectangle(0, 0, target.Width, target.Height),
                                         cropRect,
                                         GraphicsUnit.Pixel);
                    }
                    //cropped ######################################################################

                    acc_Letters_scanBindingSource.AddNew();
                    System.IO.MemoryStream ms = new System.IO.MemoryStream();
                    target.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                    byte[] arrImage = ms.GetBuffer();
                    ((OfficeDataSet.acc_Letters_scanRow)((DataRowView)acc_Letters_scanBindingSource.Current).Row).img = arrImage;
                    ms.Close();
                    ((OfficeDataSet.acc_Letters_scanRow)((DataRowView)acc_Letters_scanBindingSource.Current).Row).letter_id =
                        ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).id;
                    acc_Letters_scanBindingSource.EndEdit();
                    acc_Letters_scanTableAdapter.Update(this.officeDataSet.acc_Letters_scan);
                }

                //save to pdf field of database################
                FileStream stream = File.OpenRead(Properties.Settings.Default.doc_tmp_file);
                byte[] fileBytes = new byte[stream.Length];
                stream.Read(fileBytes, 0, fileBytes.Length);
                stream.Close();
                ((OfficeDataSet.acc_LettersRow)((DataRowView)acc_LettersBindingSource.Current).Row).pdf = fileBytes;
                acc_LettersBindingSource.EndEdit();
                acc_LettersTableAdapter.Update(this.officeDataSet.acc_Letters);
                //saved########################################

                pdfDoc.Dispose();
            }

            //else MessageBox.Show("უფლებები შეზღუდულია!!!", "ინფორმაცია", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void docmaster_gridView_RowCountChanged(object sender, EventArgs e)
        {
            DisableEnableSaveBtn();
        }

        private void famsGridControl_FocusedViewChanged(object sender, DevExpress.XtraGrid.ViewFocusEventArgs e)
        {
            DisableEnableSaveBtn();
        }

        private void FamsGridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            DisableEnableSaveBtn();
        }

        private void lettersGridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            DisableEnableSaveBtn();
        }

        private void FamsGridView_MasterRowExpanded(object sender, DevExpress.XtraGrid.Views.Grid.CustomMasterRowEventArgs e)
        {
            //Debug.WriteLine(e.RowHandle + ":" + e.RelationIndex);
        }

        private void lettersGridView_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            if (e.Column.Name == "flowColumn2" && e.IsGetData)
            {
                DevExpress.XtraGrid.Views.Grid.GridView view = sender as DevExpress.XtraGrid.Views.Grid.GridView;
                bool flow = Convert.ToBoolean(view.GetRowCellValue(e.ListSourceRowIndex, colisReceived));
                if (flow) e.Value = imageCollection1.Images[2]; else e.Value = imageCollection1.Images[0];
            }
        }



        

        private void DisableEnableSaveBtn()
        {
            if (!user.Nebartva) { btnCopyLetter.Enabled = false; return; }

            btnCopyLetter.Enabled = false;

            if (famsGridControl.FocusedView.Name.Equals("lettersGridView"))
            {
                int parent_letter_id = -1;
                try
                {
                    DevExpress.XtraGrid.Views.Base.ColumnView detailView = FamsGridView.GetDetailView(FamsGridView.FocusedRowHandle, 1) as DevExpress.XtraGrid.Views.Base.ColumnView;
                    parent_letter_id = Convert.ToInt32(detailView.GetDataRow(detailView.FocusedRowHandle)["parent_letter_id"]);
                }
                catch { }

                //esli eto vxodyaschee pismo, zapretit ego dobavlenie k pismu 
                if ((docmaster_gridView.GetFocusedDataRow()["FlowDirectionID"].ToString() == "3"))
                {
                    Debug.WriteLine("esli eto vxodyaschee pismo, zapretit ego dobavlenie k pismu ");
                    btnCopyLetter.Enabled = false;
                    return;
                }

                //esli eto isxodyaschee pismo, razreshit ego dobavlenie tolko k pismu, u kotorogo netu parenta
                if ((docmaster_gridView.GetFocusedDataRow()["FlowDirectionID"].ToString() == "1"))
                {
                    Debug.WriteLine(parent_letter_id + ":" + "esli eto isxodyaschee pismo, razreshit ego dobavlenie tolko k pismu, u kotorogo netu parenta");
                    btnCopyLetter.Enabled = (parent_letter_id < 0);
                    return;
                }

            }

            else
            {
                btnCopyLetter.Enabled =
                    (docmaster_gridView.RowCount > 0 &&
                    docmaster_gridView.SelectedRowsCount == 1 &&
                    FamsGridView.RowCount > 0);
            }

        }


        

        




    }

    public class loginObject
    {
        public string userName { get; set; }
        public string password { get; set; }

        public loginObject(string user, string pass)
        {
            userName = user;
            password = ConvertStringtoMD5(pass);
        }


        private static string ConvertStringtoMD5(string strword)
        {
            MD5 md5 = MD5.Create();
            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(strword);
            byte[] hash = md5.ComputeHash(inputBytes);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hash.Length; i++)
            {
                sb.Append(hash[i].ToString("x2"));
            }
            return sb.ToString();
        }

    }
}
